{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"How%20to%20replace%20models%20or%20materials/","text":"How to replace models or materials? \u00b6 Changes of things look provides by the skin system. You want to replace a chair model? Replace it in the skin. What is a skin? Read here: Skin The same for walls, doors, facades etc. Everything changes by changing skins. Every skin contains a bunch of views of objects. House has two groups of skins: Base skins. Interior skins. Base skins usually contains facade objects, roof and other things which don't belong to rooms. But these skins are able to contains default look for things, that's fine and that's because these skins uses as a fallback for situations then some room thing can't find a part builder in relevant interior skins. So if you want to change look of the room - change Interior skin. If you want to change facade - change the base skin. Replace a sofa model example \u00b6 Sofa is a part of room, so we need to change interior skins to get the result. Note You can change a view of object just for one interior, so all rooms with this interior will have this new look, but other rooms will not. To change a look of some object for all rooms you should change it in all interior skins. Open a Furniture Origin Skin Select [auto] Chilling Section Small Remove sofa models. Add new model as a child of the [auto] Chilling Section Small game object. Fix position Close the prefab workspace Regenerate the house Replace a sofa model by skin overriding \u00b6 Another interesting way to replace something is a skin overriding. To find out that does it mean lets select some interior. Take a closer look on the Skins section. It's a list of skins for this interior. Order of skins is important, top skins have higher priority than down, so you can create a new skin, add sofa to it and place it in the top of skins list. In result default sofa will be overriden by new. Create prefab Add Skin component to this prefab Open prefab Create an empty game object Name it exactly as object which you want to replace Add Part Builder component to this object Reset it's position Place new model as a child of this game object Fix position Click an Update Binding button on the Skin component on the prefab root. Close prefab workspace and select an interior Add this skin in the top of the skins list Regenerate the house","title":"**How to replace models or materials?**"},{"location":"How%20to%20replace%20models%20or%20materials/#how-to-replace-models-or-materials","text":"Changes of things look provides by the skin system. You want to replace a chair model? Replace it in the skin. What is a skin? Read here: Skin The same for walls, doors, facades etc. Everything changes by changing skins. Every skin contains a bunch of views of objects. House has two groups of skins: Base skins. Interior skins. Base skins usually contains facade objects, roof and other things which don't belong to rooms. But these skins are able to contains default look for things, that's fine and that's because these skins uses as a fallback for situations then some room thing can't find a part builder in relevant interior skins. So if you want to change look of the room - change Interior skin. If you want to change facade - change the base skin.","title":"How to replace models or materials?"},{"location":"How%20to%20replace%20models%20or%20materials/#replace-a-sofa-model-example","text":"Sofa is a part of room, so we need to change interior skins to get the result. Note You can change a view of object just for one interior, so all rooms with this interior will have this new look, but other rooms will not. To change a look of some object for all rooms you should change it in all interior skins. Open a Furniture Origin Skin Select [auto] Chilling Section Small Remove sofa models. Add new model as a child of the [auto] Chilling Section Small game object. Fix position Close the prefab workspace Regenerate the house","title":"Replace a sofa model example"},{"location":"How%20to%20replace%20models%20or%20materials/#replace-a-sofa-model-by-skin-overriding","text":"Another interesting way to replace something is a skin overriding. To find out that does it mean lets select some interior. Take a closer look on the Skins section. It's a list of skins for this interior. Order of skins is important, top skins have higher priority than down, so you can create a new skin, add sofa to it and place it in the top of skins list. In result default sofa will be overriden by new. Create prefab Add Skin component to this prefab Open prefab Create an empty game object Name it exactly as object which you want to replace Add Part Builder component to this object Reset it's position Place new model as a child of this game object Fix position Click an Update Binding button on the Skin component on the prefab root. Close prefab workspace and select an interior Add this skin in the top of the skins list Regenerate the house","title":"Replace a sofa model by skin overriding"},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/","text":"Deep dive into house building process \u00b6 The process of house generation splits in three steps: Generating house cells Extracting a house build data from cells Building the house from an extracted house build data 1. Generating house cells . \u00b6 This step provides by the Pipeline - a visual scripting system. From the Pipeline perspective there is no 3D meshes, materials, textures etc. The Pipeline works with an abstract idea of parts of the house. And the name of this abstract thing is... The Part ! Pretty obvious :D That is the Part? \u00b6 So, basically, part is a scriptable object with name and references to 3 other parts which represents exactly the same part but rotated by 90, 180 and 270 degrees. Some parts has no rotations (example: floor, ceiling, round table...) so rotated parts references will be empty and that's fine . Part without rotations The most important aspect of the part instance is it's name . The part's name is all that the Pipeline should know to start working with it. You can even have two parts with different GUID but with the same name and the Pipeline will thinks that they are equals . The Pipeline has only one target - create cells. That are Cells? \u00b6 Cells is an abstract representation of house in the code. To understand the conception just image a house as a 3D grid of cells. Each cell contains a floor, ceiling, walls and something else. Floor, ceiling and walls are parts . So yeah, cells is just a 3D grid of parts lists. Representation in code Cells Cell In the pipeline you creates cells, modifies them, removes, merges and so on. And in the end you returns the result in the end node. Created cells comes to the second step of the generation - extracting a house build data from cells. 2. Extracting a house build data from cells . \u00b6 Build Data Extractor transforms cells from an abstract representation of house to the house building instruction. It sorts cells to floors and rooms and finds part's builder for all cell's parts. To do it Build Data Extractor asks skins if they have a PartBuilder for some part. Priority of skins asking from highest to lowest: Override Skin Layer 1 from the Pipeline Override Skin Layer 2 from the Pipeline Override Skin Layer 3 from the Pipeline Room interior skins House Base skins Skins Override Skin Layers Interior Skins House Base Skins So interior skins has always higher priority than house skins and by this reason you can override a view of room's walls by changing interior skins. Override Skin Layers were created for special cases when you want to change view of some special cells filtered by your own rules in the Pipeline. If there is no PartBuilder for some part this part will be ignored during house building. So in the result it returns a structured collection of PartBuilders - a House Build Data . Representation in code Floors Floor Room Cell 3. Building of the house by the house build data. \u00b6 The House Builder takes a house build data and just build it! Actually it's a little more complicated but there is no reason to dive so deep. But why so complicated? \u00b6 Well, there is only one reason - flexibility . If you are programmer you may know the conception of model-view splitting . Here Part is a model and PartBuilder is a view . Part is an abstract idea of something, and it's very important to stay this idea clear. Thanks to this separation we can redefine how cell should look right on the fly . For example you created some pipeline which generates a simple village house. And you have a regular village where you want to place it. So you just do it. Awesome. But then you want to add a village which was corrupted by chaos, with lakes of blood, rusted chains and so on. But you have this innocent vibrant happy house! That's not that you want. Thanks to this separation, you just need to edit skins to change a view of house. You don't need to touch the Pipeline at all . And that's wonderful.","title":"Deep dive into house building process"},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#deep-dive-into-house-building-process","text":"The process of house generation splits in three steps: Generating house cells Extracting a house build data from cells Building the house from an extracted house build data","title":"Deep dive into house building process"},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#1-generating-house-cells","text":"This step provides by the Pipeline - a visual scripting system. From the Pipeline perspective there is no 3D meshes, materials, textures etc. The Pipeline works with an abstract idea of parts of the house. And the name of this abstract thing is... The Part ! Pretty obvious :D","title":"1. Generating house cells."},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#that-is-the-part","text":"So, basically, part is a scriptable object with name and references to 3 other parts which represents exactly the same part but rotated by 90, 180 and 270 degrees. Some parts has no rotations (example: floor, ceiling, round table...) so rotated parts references will be empty and that's fine . Part without rotations The most important aspect of the part instance is it's name . The part's name is all that the Pipeline should know to start working with it. You can even have two parts with different GUID but with the same name and the Pipeline will thinks that they are equals . The Pipeline has only one target - create cells.","title":"That is the Part?"},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#that-are-cells","text":"Cells is an abstract representation of house in the code. To understand the conception just image a house as a 3D grid of cells. Each cell contains a floor, ceiling, walls and something else. Floor, ceiling and walls are parts . So yeah, cells is just a 3D grid of parts lists. Representation in code Cells Cell In the pipeline you creates cells, modifies them, removes, merges and so on. And in the end you returns the result in the end node. Created cells comes to the second step of the generation - extracting a house build data from cells.","title":"That are Cells?"},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#2-extracting-a-house-build-data-from-cells","text":"Build Data Extractor transforms cells from an abstract representation of house to the house building instruction. It sorts cells to floors and rooms and finds part's builder for all cell's parts. To do it Build Data Extractor asks skins if they have a PartBuilder for some part. Priority of skins asking from highest to lowest: Override Skin Layer 1 from the Pipeline Override Skin Layer 2 from the Pipeline Override Skin Layer 3 from the Pipeline Room interior skins House Base skins Skins Override Skin Layers Interior Skins House Base Skins So interior skins has always higher priority than house skins and by this reason you can override a view of room's walls by changing interior skins. Override Skin Layers were created for special cases when you want to change view of some special cells filtered by your own rules in the Pipeline. If there is no PartBuilder for some part this part will be ignored during house building. So in the result it returns a structured collection of PartBuilders - a House Build Data . Representation in code Floors Floor Room Cell","title":"2. Extracting a house build data from cells."},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#3-building-of-the-house-by-the-house-build-data","text":"The House Builder takes a house build data and just build it! Actually it's a little more complicated but there is no reason to dive so deep.","title":"3. Building of the house by the house build data."},{"location":"Introduction/Deep%20Dive%20Into%20House%20Building%20Process/#but-why-so-complicated","text":"Well, there is only one reason - flexibility . If you are programmer you may know the conception of model-view splitting . Here Part is a model and PartBuilder is a view . Part is an abstract idea of something, and it's very important to stay this idea clear. Thanks to this separation we can redefine how cell should look right on the fly . For example you created some pipeline which generates a simple village house. And you have a regular village where you want to place it. So you just do it. Awesome. But then you want to add a village which was corrupted by chaos, with lakes of blood, rusted chains and so on. But you have this innocent vibrant happy house! That's not that you want. Thanks to this separation, you just need to edit skins to change a view of house. You don't need to touch the Pipeline at all . And that's wonderful.","title":"But why so complicated?"},{"location":"Introduction/Getting%20Started/","text":"Getting Started \u00b6 Domik is a procedural house generator which you can use to create houses in the editor or runtime. What can Domik do for you? \u00b6 You can generate a lots of different houses to your game less than several minutes. You can add your own 3D models instead of built-in. You can create your own furniture or something else like a spawn point . Just use the furniture system. You can delete an example folder and do everything your own way. No, coding is not necessary, the Domik includes a powerful visual scripting system - the Pipeline . You can change walls , doors , ceiling , roof ... everything ! You can generate a house runtime if you want to make something like a roguelike game . You can switch between different looks of the house by skins system . And yeah, skin system supports 2D and 3D assets (there is no 2D skin examples at this moment, however). You can work with rooms view individually by an interior system . Multiple floors are supported. Stairs are supported. Elevators can be added pretty easy, but there is no example at this moment. Generation based on the seed number , so you can integrate the Domik with your own procedural worlds. You can use the seed number to generate houses in the multiplayer game too! Just send the seed number to client-side house generators and they were create the same houses as on the server. You can use it in mobile , console , WebGL and PC games (but be careful with performance, some tech tweaks can be necessary to provide a smooth experience). You can use it with HDRP , URP and Built-in scriptable pipeline. Just update project materials as it says in the Unity documentation. You can change things by hands after generation process. The Domik has it's own mesh combine system , so optimization process is little bit easy. But external house building solutions also possible. You can make beautiful and complex facades . You can make a house without facades if you wan't to make something like the Sims. Or without roof! Or without furniture! Or... You can do what you want, you're big boy (or girl, or something between), just use the Pipeline ! Create your first procedural house \u00b6 Open the Domik folder Select House Example prefab Drag-n-Drop it on the scene. Select it on the scene Click Generate From Random button in the Inspector. Congrats! Now let's make them more . Select House Example Prefab in the Hierarchy . Press Ctrl-D to duplicate prefab instance in the scene. Change the position on duplicated house by dragging gizmo handle. Click Generate Random button to regenerate it. Repeat. Wonderful bunch of houses, isn't it? You can also regenerate some house to change it's look. TODO: \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043c\u0435\u0431\u0435\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043d\u044b \u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0447\u0443\u0432\u0430\u043a \u043c\u043e\u0433 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f \u043c\u0435\u0431\u0435\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043b\u0438\u043a\u043d\u0443\u0432 \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443. \u041a\u043e\u043b\u043e\u043d\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043c\u043d\u043e\u0433\u043e, \u043e\u0442 \u0441\u0430\u043c\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0440\u043e\u0434\u0435 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u043d\u0430 \u043f\u043e\u043b\u0443, \u0434\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0439, \u0432\u0440\u043e\u0434\u0435 \u043b\u0435\u0441\u0442\u043d\u0438\u0446\u044b, \u0433\u0434\u0435 \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u043c\u0430\u0441\u043a\u0443 \u0438 \u043b\u0435\u0437\u0442\u044c \u0432 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d. \u0422\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0433\u0434\u0435 \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 Place Create Preview System before starting work with articles below. See Also \u00b6 How to change house size How to change house floors How to change room walls How to change facade How to add new furniture What is a Placeable Object","title":"Getting Started"},{"location":"Introduction/Getting%20Started/#getting-started","text":"Domik is a procedural house generator which you can use to create houses in the editor or runtime.","title":"Getting Started"},{"location":"Introduction/Getting%20Started/#what-can-domik-do-for-you","text":"You can generate a lots of different houses to your game less than several minutes. You can add your own 3D models instead of built-in. You can create your own furniture or something else like a spawn point . Just use the furniture system. You can delete an example folder and do everything your own way. No, coding is not necessary, the Domik includes a powerful visual scripting system - the Pipeline . You can change walls , doors , ceiling , roof ... everything ! You can generate a house runtime if you want to make something like a roguelike game . You can switch between different looks of the house by skins system . And yeah, skin system supports 2D and 3D assets (there is no 2D skin examples at this moment, however). You can work with rooms view individually by an interior system . Multiple floors are supported. Stairs are supported. Elevators can be added pretty easy, but there is no example at this moment. Generation based on the seed number , so you can integrate the Domik with your own procedural worlds. You can use the seed number to generate houses in the multiplayer game too! Just send the seed number to client-side house generators and they were create the same houses as on the server. You can use it in mobile , console , WebGL and PC games (but be careful with performance, some tech tweaks can be necessary to provide a smooth experience). You can use it with HDRP , URP and Built-in scriptable pipeline. Just update project materials as it says in the Unity documentation. You can change things by hands after generation process. The Domik has it's own mesh combine system , so optimization process is little bit easy. But external house building solutions also possible. You can make beautiful and complex facades . You can make a house without facades if you wan't to make something like the Sims. Or without roof! Or without furniture! Or... You can do what you want, you're big boy (or girl, or something between), just use the Pipeline !","title":"What can Domik do for you?"},{"location":"Introduction/Getting%20Started/#create-your-first-procedural-house","text":"Open the Domik folder Select House Example prefab Drag-n-Drop it on the scene. Select it on the scene Click Generate From Random button in the Inspector. Congrats! Now let's make them more . Select House Example Prefab in the Hierarchy . Press Ctrl-D to duplicate prefab instance in the scene. Change the position on duplicated house by dragging gizmo handle. Click Generate Random button to regenerate it. Repeat. Wonderful bunch of houses, isn't it? You can also regenerate some house to change it's look. TODO: \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 \u043c\u0435\u0431\u0435\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043d\u044b \u0438 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0447\u0443\u0432\u0430\u043a \u043c\u043e\u0433 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f \u043c\u0435\u0431\u0435\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043b\u0438\u043a\u043d\u0443\u0432 \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443. \u041a\u043e\u043b\u043e\u043d\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043c\u043d\u043e\u0433\u043e, \u043e\u0442 \u0441\u0430\u043c\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0440\u043e\u0434\u0435 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u043d\u0430 \u043f\u043e\u043b\u0443, \u0434\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0439, \u0432\u0440\u043e\u0434\u0435 \u043b\u0435\u0441\u0442\u043d\u0438\u0446\u044b, \u0433\u0434\u0435 \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u043c\u0430\u0441\u043a\u0443 \u0438 \u043b\u0435\u0437\u0442\u044c \u0432 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d. \u0422\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0433\u0434\u0435 \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 Place Create Preview System before starting work with articles below.","title":"Create your first procedural house"},{"location":"Introduction/Getting%20Started/#see-also","text":"How to change house size How to change house floors How to change room walls How to change facade How to add new furniture What is a Placeable Object","title":"See Also"},{"location":"Introduction/How%20to%20add%20new%20furniture/","text":"How to add new furniture? \u00b6 From the Domik perspective there is no difference between walls, doors, furniture or something else. It's all parts. If you want to add new furniture you should add new part. Part is an abstract idea of some object, so you need to add view to it also. Skins system provides it. That's how this system works: You clicks Generate button House Generator requests it's Pipeline generate house cells (each cell is a container of parts) The Pipeline returns house cells House Generator iterates over all cells and then asks skins if they have some view ( PartBuilder ) for this part of the cell and if it found House Generator sends request to build it. Read more: Deep Dive Into House Building Process Lets add new chair to see how it works. There is two workflow which you can use to add new house parts: Manual Workflow \u00b6 Manual workflow is a slow and ineffective method of adding new house parts, but it's simple and intuitive. Don't recommend to use it anyway . First, we need to create a chair part. To do it click on some folder -> Create -> Domik -> Part But that's not enough. Chair can have at least four rotations, so we have to add three more parts. Now let's look at the Chair Part's inspector. Here we have references to other three rotated parts We should fill them to make things works properly. Repeat it for Chair Right, Chair Left and Chair Backward parts. Result will looks like that: Now we need to create views for these parts. To do it we should use the Skins system. We can extend existed skin or create brand new. Let's extend the furniture skin. To do it go to the Domik folder -> House Example -> Skins -> Furniture -> open Furniture Origin Basically, Skin is a prefab with Skin component, so you can use it as regular prefab. In this example we open a Furniture Origin prefab because it's a root prefab. Furniture Black, Furniture White and Furniture Wooden Light are nested prefabs, so if you'll add something in the Furniture Origin prefabs it automatically will be added to these nested furniture prefabs. Adding Part's view to the furniture skin \u00b6 That's how regular skin looks like. In the hierarchy window you can see a tons of objects. They're parts views. Enable objects which you want to edit or which represents an environment and disable other. Note that these object contains a PartBuilder component. Skin component is in the root object, so to work with it just select root object. Now let's add a view for our chair! To do it drag'n'drop some prefab or model to the skin's hierarchy. Now we should add a Part Builder component to this chair. After that we should register this PartBuilder in the Skin. To do it we should add new bin to the Binds list in the Skin component, and drag Chair Part Builder and Chair Part to it. And set a rotation offset to the zero. Repeat this with the rest of the turns. Congrats! Let's checkout the result. If Preview Systems draws parts you did everything right. Now you can use it to create Placeable Object! Read next: What is a Placeable Object Automated Workflow \u00b6 Different way to add new stuff is using auto-binding tools. This workflow is recommended. In this workflow we should add a PartBuilder for our new furniture to the skin, name it properly and start the AutoBinding process. Skin will scan all Parts in the project and if It'll find Part and PartBuilder with the same name (except prefix in square brackets) - binds them together. What if there is no Part for some PartBuilders? Well, if you enabled a Create Parts for unbound? option they will be created automatically with relevant names. Also here we will use an [auto] prefix which means that this object can be rotated and the Skin will try to find or create four parts with [0] , [90] , [180] and [270] prefixes instead of [auto] prefix. Let's see it in action! Open the Furniture skin and drag-n-drop the chair prefab to it's hierarchy. Add Part Builder component to it. Add an [auto] prefix to it's name. Use this name prefix with things which can be rotated. It'll works only if you use an auto-binding function. Go to the Skin component and enable a Create Parts for unbound? checkbox if it disabled. Now the Skin will create parts for all PartBuilders for which there were no relevant parts. Select a folder there you want to put new parts. No all new parts will be dropped to this folder. Click an Update Binding button. Done! Let's check it. As you can see the chair rotates with little shift. That's because chair is not in the center of cell. Let's fix it! To do it move chair to the center of cell. Checking out. Congratulations! Now you can use these parts to create a PlaceableObject.","title":"How to add new furniture"},{"location":"Introduction/How%20to%20add%20new%20furniture/#how-to-add-new-furniture","text":"From the Domik perspective there is no difference between walls, doors, furniture or something else. It's all parts. If you want to add new furniture you should add new part. Part is an abstract idea of some object, so you need to add view to it also. Skins system provides it. That's how this system works: You clicks Generate button House Generator requests it's Pipeline generate house cells (each cell is a container of parts) The Pipeline returns house cells House Generator iterates over all cells and then asks skins if they have some view ( PartBuilder ) for this part of the cell and if it found House Generator sends request to build it. Read more: Deep Dive Into House Building Process Lets add new chair to see how it works. There is two workflow which you can use to add new house parts:","title":"How to add new furniture?"},{"location":"Introduction/How%20to%20add%20new%20furniture/#manual-workflow","text":"Manual workflow is a slow and ineffective method of adding new house parts, but it's simple and intuitive. Don't recommend to use it anyway . First, we need to create a chair part. To do it click on some folder -> Create -> Domik -> Part But that's not enough. Chair can have at least four rotations, so we have to add three more parts. Now let's look at the Chair Part's inspector. Here we have references to other three rotated parts We should fill them to make things works properly. Repeat it for Chair Right, Chair Left and Chair Backward parts. Result will looks like that: Now we need to create views for these parts. To do it we should use the Skins system. We can extend existed skin or create brand new. Let's extend the furniture skin. To do it go to the Domik folder -> House Example -> Skins -> Furniture -> open Furniture Origin Basically, Skin is a prefab with Skin component, so you can use it as regular prefab. In this example we open a Furniture Origin prefab because it's a root prefab. Furniture Black, Furniture White and Furniture Wooden Light are nested prefabs, so if you'll add something in the Furniture Origin prefabs it automatically will be added to these nested furniture prefabs.","title":"Manual Workflow"},{"location":"Introduction/How%20to%20add%20new%20furniture/#adding-parts-view-to-the-furniture-skin","text":"That's how regular skin looks like. In the hierarchy window you can see a tons of objects. They're parts views. Enable objects which you want to edit or which represents an environment and disable other. Note that these object contains a PartBuilder component. Skin component is in the root object, so to work with it just select root object. Now let's add a view for our chair! To do it drag'n'drop some prefab or model to the skin's hierarchy. Now we should add a Part Builder component to this chair. After that we should register this PartBuilder in the Skin. To do it we should add new bin to the Binds list in the Skin component, and drag Chair Part Builder and Chair Part to it. And set a rotation offset to the zero. Repeat this with the rest of the turns. Congrats! Let's checkout the result. If Preview Systems draws parts you did everything right. Now you can use it to create Placeable Object! Read next: What is a Placeable Object","title":"Adding Part's view to the furniture skin"},{"location":"Introduction/How%20to%20add%20new%20furniture/#automated-workflow","text":"Different way to add new stuff is using auto-binding tools. This workflow is recommended. In this workflow we should add a PartBuilder for our new furniture to the skin, name it properly and start the AutoBinding process. Skin will scan all Parts in the project and if It'll find Part and PartBuilder with the same name (except prefix in square brackets) - binds them together. What if there is no Part for some PartBuilders? Well, if you enabled a Create Parts for unbound? option they will be created automatically with relevant names. Also here we will use an [auto] prefix which means that this object can be rotated and the Skin will try to find or create four parts with [0] , [90] , [180] and [270] prefixes instead of [auto] prefix. Let's see it in action! Open the Furniture skin and drag-n-drop the chair prefab to it's hierarchy. Add Part Builder component to it. Add an [auto] prefix to it's name. Use this name prefix with things which can be rotated. It'll works only if you use an auto-binding function. Go to the Skin component and enable a Create Parts for unbound? checkbox if it disabled. Now the Skin will create parts for all PartBuilders for which there were no relevant parts. Select a folder there you want to put new parts. No all new parts will be dropped to this folder. Click an Update Binding button. Done! Let's check it. As you can see the chair rotates with little shift. That's because chair is not in the center of cell. Let's fix it! To do it move chair to the center of cell. Checking out. Congratulations! Now you can use these parts to create a PlaceableObject.","title":"Automated Workflow"},{"location":"Introduction/How%20to%20change%20facade/","text":"How to change Facade? \u00b6 As you may read before, everything about the appearance, changes through the skin system. So, if we want to change view of the facade we should change house base skins. But in case of house skins things little bit difficultly. Facade of the house is splitted to five segments - thin facade, regular facade, thick facade, columns and plinth, so you can combine them as you want by changing floors tags. Or you can override House Skins in the House Generator component by adding new skins in top of the list. Method 1 - Change Floors Tags \u00b6 This method provides by the Pipeline. To use it just select some floor and change it's facade tag. It works because an example pipeline includes special logic. Here cells of floors with Facade tags will be filtered and processed to achive the final result. You can create your own Tags and generation steps also. Read more: What are floor tags Method 2 - Change House Skins \u00b6 Select the House Generator prefab instance on the scene and look at the House Skins panel. Here is already added a Facade pallets random container and three skins. To change the house facade we should add new skin in top of this skins list. Facade is splitted into five skins, but in this tutorial we will change only one - Facade Regular skin . To do it let's just duplicate already existed regular facade skin and edit it. Go to the Domik folder -> House Example -> Skins -> Facade Walls Regular, duplicate some skin and open it. Now replace materials with something other. Exit with saving, drag-n-drop this skin in top of the House Generator skins list and regenerate to checkout the result. You can also change meshes of walls or add something new. Let's make this wall even worse and add new window frames. Method 3: Working with Palettes. \u00b6 Palettes is a tool which mostly uses to make skins more randomly, but you can use it to work with skins more comfortable as well.","title":"How to change facade"},{"location":"Introduction/How%20to%20change%20facade/#how-to-change-facade","text":"As you may read before, everything about the appearance, changes through the skin system. So, if we want to change view of the facade we should change house base skins. But in case of house skins things little bit difficultly. Facade of the house is splitted to five segments - thin facade, regular facade, thick facade, columns and plinth, so you can combine them as you want by changing floors tags. Or you can override House Skins in the House Generator component by adding new skins in top of the list.","title":"How to change Facade?"},{"location":"Introduction/How%20to%20change%20facade/#method-1-change-floors-tags","text":"This method provides by the Pipeline. To use it just select some floor and change it's facade tag. It works because an example pipeline includes special logic. Here cells of floors with Facade tags will be filtered and processed to achive the final result. You can create your own Tags and generation steps also. Read more: What are floor tags","title":"Method 1 - Change Floors Tags"},{"location":"Introduction/How%20to%20change%20facade/#method-2-change-house-skins","text":"Select the House Generator prefab instance on the scene and look at the House Skins panel. Here is already added a Facade pallets random container and three skins. To change the house facade we should add new skin in top of this skins list. Facade is splitted into five skins, but in this tutorial we will change only one - Facade Regular skin . To do it let's just duplicate already existed regular facade skin and edit it. Go to the Domik folder -> House Example -> Skins -> Facade Walls Regular, duplicate some skin and open it. Now replace materials with something other. Exit with saving, drag-n-drop this skin in top of the House Generator skins list and regenerate to checkout the result. You can also change meshes of walls or add something new. Let's make this wall even worse and add new window frames.","title":"Method 2 - Change House Skins"},{"location":"Introduction/How%20to%20change%20facade/#method-3-working-with-palettes","text":"Palettes is a tool which mostly uses to make skins more randomly, but you can use it to work with skins more comfortable as well.","title":"Method 3: Working with Palettes."},{"location":"Introduction/How%20to%20change%20house%20floors/","text":"How to change floors. \u00b6 Floors system bases on the premade floors scriptable objects, and the Domik includes some floors examples which you can inspect, extend and use. Use Floors panel in the House Generator component to change house floors. Here you can add, remove or reorder some of premade floors. See also: How to create new floor","title":"How to change house floors"},{"location":"Introduction/How%20to%20change%20house%20floors/#how-to-change-floors","text":"Floors system bases on the premade floors scriptable objects, and the Domik includes some floors examples which you can inspect, extend and use. Use Floors panel in the House Generator component to change house floors. Here you can add, remove or reorder some of premade floors. See also: How to create new floor","title":"How to change floors."},{"location":"Introduction/How%20to%20change%20house%20size/","text":"Change House Size \u00b6 To change size of the house select the house prefab in the scene and look at the Base Size panel in the House Generator component. This panel defines target size of the house. Final size can be different and depends on the Pipeline. Width - target width of the house. Length - target length of the house. Floors - target floors count. You can select between two size modes: const and rand - const - constant size. - rand - random size. Random size example","title":"How to change house size"},{"location":"Introduction/How%20to%20change%20house%20size/#change-house-size","text":"To change size of the house select the house prefab in the scene and look at the Base Size panel in the House Generator component. This panel defines target size of the house. Final size can be different and depends on the Pipeline. Width - target width of the house. Length - target length of the house. Floors - target floors count. You can select between two size modes: const and rand - const - constant size. - rand - random size. Random size example","title":"Change House Size"},{"location":"Introduction/How%20to%20change%20room%20walls/","text":"How to change room walls? \u00b6 In the Domik if you want to change look of something, including room walls, you should change some skin or create new. So let's do it! Select some interior and find it in the house. In this tutorial I'll work with Living Room. As you can see something in Skins panel is already here. It's a Palette Random Container! This is a container of pallets which will return one of it's random palette during house building. But that's a Palette? Palette is a container of skins, which allows you to collect skins on some topic. We don't need them right now so just ignore them. To change look of room walls we need to add some skin in top of interior skins list. This skin should have PartBuilders for internal walls. Fortunately we already have some of them in the Domik -> House Example -> Skins -> Walls Here is three folders: Let's open Regular folder. Skins are basically just prefabs with Skin component on the root object and some children objects with PartBuilder components. So you can use all features of regular prefabs with them, including nesting of prefabs . Walls Origin here is an original prefab a all other Walls prefabs are nested , so if you make some changes of Origin skin prefab it'll make effects on nested . We just need to change walls material so let's just duplicate some nested skin and open it to edit. This skin contains five PartBuilders. So now let's create some material and add to the wall. Repeat it for other PartBuilders. Quit from prefab edit mode, add the result skin to the Living Room Interior and checkout the result by regenerating of house. Congrats! Now you know how to change walls of the house. Similarly, you can change the rest of the room, including the ceiling, floor and furniture.","title":"How to change room walls"},{"location":"Introduction/How%20to%20change%20room%20walls/#how-to-change-room-walls","text":"In the Domik if you want to change look of something, including room walls, you should change some skin or create new. So let's do it! Select some interior and find it in the house. In this tutorial I'll work with Living Room. As you can see something in Skins panel is already here. It's a Palette Random Container! This is a container of pallets which will return one of it's random palette during house building. But that's a Palette? Palette is a container of skins, which allows you to collect skins on some topic. We don't need them right now so just ignore them. To change look of room walls we need to add some skin in top of interior skins list. This skin should have PartBuilders for internal walls. Fortunately we already have some of them in the Domik -> House Example -> Skins -> Walls Here is three folders: Let's open Regular folder. Skins are basically just prefabs with Skin component on the root object and some children objects with PartBuilder components. So you can use all features of regular prefabs with them, including nesting of prefabs . Walls Origin here is an original prefab a all other Walls prefabs are nested , so if you make some changes of Origin skin prefab it'll make effects on nested . We just need to change walls material so let's just duplicate some nested skin and open it to edit. This skin contains five PartBuilders. So now let's create some material and add to the wall. Repeat it for other PartBuilders. Quit from prefab edit mode, add the result skin to the Living Room Interior and checkout the result by regenerating of house. Congrats! Now you know how to change walls of the house. Similarly, you can change the rest of the room, including the ceiling, floor and furniture.","title":"How to change room walls?"},{"location":"Introduction/How%20to%20create%20Mask/","text":"How to create mask \u00b6 Mask also knows as Adjacency Mask is a description of some place but in terms of accessibility from the target cell. Mostly useful in situations when you want to find borders of rooms or whole house. To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Mask Space - what type of accessibility do you want to check? - House - you want to check that the neighboring cell belongs to the house (you want to find borders of house). - Rooms - you want to check that the neighboring cell belongs to target cell's room (you want to find borders of room). Floor - select floor where you want to edit cells checking mode. To start working with cells select some cell in the grid. State - select what you expect from this cell - Not Important - you don't want to check this cell. - Accessible - this cell should be belong to the same room as a target cell if you selected the Rooms space or this cell should be belong to the house if you selected the House space. - Inaccessible - this cell should be belong to another room or doesn't exist at all if you selected the Room space. If you selected the House space this cell shouldn't exist in this house. Also, you can see changes of mask visually by Preview.","title":"How to create Mask"},{"location":"Introduction/How%20to%20create%20Mask/#how-to-create-mask","text":"Mask also knows as Adjacency Mask is a description of some place but in terms of accessibility from the target cell. Mostly useful in situations when you want to find borders of rooms or whole house. To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Mask Space - what type of accessibility do you want to check? - House - you want to check that the neighboring cell belongs to the house (you want to find borders of house). - Rooms - you want to check that the neighboring cell belongs to target cell's room (you want to find borders of room). Floor - select floor where you want to edit cells checking mode. To start working with cells select some cell in the grid. State - select what you expect from this cell - Not Important - you don't want to check this cell. - Accessible - this cell should be belong to the same room as a target cell if you selected the Rooms space or this cell should be belong to the house if you selected the House space. - Inaccessible - this cell should be belong to another room or doesn't exist at all if you selected the Room space. If you selected the House space this cell shouldn't exist in this house. Also, you can see changes of mask visually by Preview.","title":"How to create mask"},{"location":"Introduction/How%20to%20create%20Place/","text":"How to create Place \u00b6 To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Place Place is a description of some... place :D Basically it's a small 3x3x3 grid with parts. Filter node or Placing System will use it to filter cells with identical environment. So you can use it to define where you want to place some Placeable Object or you can use it to filter cells in the Pipeline. Parts \u00b6 Floor - select floor which cells you want to edit. Cells Grid \u00b6 Here is a grid of cells which represent some place. Click on some cell to start working with it. Enable - set true if you want to check this cell in filtration progress. Parts List - add here all parts which you expect to see in this cell. !Note: disabled cell and enabled cell but without parts are not equal! If you enable some cell but didn't add parts means that you expect that this cell will be totally empty.","title":"How to create place"},{"location":"Introduction/How%20to%20create%20Place/#how-to-create-place","text":"To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Place Place is a description of some... place :D Basically it's a small 3x3x3 grid with parts. Filter node or Placing System will use it to filter cells with identical environment. So you can use it to define where you want to place some Placeable Object or you can use it to filter cells in the Pipeline.","title":"How to create Place"},{"location":"Introduction/How%20to%20create%20Place/#parts","text":"Floor - select floor which cells you want to edit.","title":"Parts"},{"location":"Introduction/How%20to%20create%20Place/#cells-grid","text":"Here is a grid of cells which represent some place. Click on some cell to start working with it. Enable - set true if you want to check this cell in filtration progress. Parts List - add here all parts which you expect to see in this cell. !Note: disabled cell and enabled cell but without parts are not equal! If you enable some cell but didn't add parts means that you expect that this cell will be totally empty.","title":"Cells Grid"},{"location":"Introduction/How%20to%20create%20new%20floor/","text":"How to create floor \u00b6 To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Floor Now you can configure new floor. Flex - can this floor be duplicated to fit target house size? Set true for middle floors and false for floors with roof or basement. Interiors - here you can define a set of interiors which can be on this floor. Floor Tags - a set of tags which will be used by the Pipeline to customize this floor.","title":"How to create new floor"},{"location":"Introduction/How%20to%20create%20new%20floor/#how-to-create-floor","text":"To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Floor Now you can configure new floor. Flex - can this floor be duplicated to fit target house size? Set true for middle floors and false for floors with roof or basement. Interiors - here you can define a set of interiors which can be on this floor. Floor Tags - a set of tags which will be used by the Pipeline to customize this floor.","title":"How to create floor"},{"location":"Introduction/How%20to%20create%20new%20interior/","text":"How to create new interior \u00b6 To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Interior Interior Settings \u00b6 Furniture - here you can define a set of furniture or some other placeable objects which can be in rooms with this interior. Skins - a set of skins for rooms with this interior. These skins have higher priority than House Generator skins, so you can use them for define more specific cases like room walls, floors, furniture look , etc. Placing Rules \u00b6 this panel defines special rules for interior placing. Max Count Per Floor - Use it if you want to limit numbers of this interior on the floor. Example: you need maximum two bedrooms per floor because... why someone needs more? O.o Prefer Room - which size of room better for this interior? - Small - prefer small rooms - Middle - prefer regular rooms - Big - prefer big rooms - Random - you don't care Parts Limit \u00b6 Here you defines necessary and forbidden parts of the house. lets add something: mode: - Fixed - only this number of part is acceptable - Range - only this range of part's count is acceptable - At least one - there should be at least one instance of this part - Unacceptable - rooms with this part will be ignored","title":"How to create new interior"},{"location":"Introduction/How%20to%20create%20new%20interior/#how-to-create-new-interior","text":"To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> Interior","title":"How to create new interior"},{"location":"Introduction/How%20to%20create%20new%20interior/#interior-settings","text":"Furniture - here you can define a set of furniture or some other placeable objects which can be in rooms with this interior. Skins - a set of skins for rooms with this interior. These skins have higher priority than House Generator skins, so you can use them for define more specific cases like room walls, floors, furniture look , etc.","title":"Interior Settings"},{"location":"Introduction/How%20to%20create%20new%20interior/#placing-rules","text":"this panel defines special rules for interior placing. Max Count Per Floor - Use it if you want to limit numbers of this interior on the floor. Example: you need maximum two bedrooms per floor because... why someone needs more? O.o Prefer Room - which size of room better for this interior? - Small - prefer small rooms - Middle - prefer regular rooms - Big - prefer big rooms - Random - you don't care","title":"Placing Rules"},{"location":"Introduction/How%20to%20create%20new%20interior/#parts-limit","text":"Here you defines necessary and forbidden parts of the house. lets add something: mode: - Fixed - only this number of part is acceptable - Range - only this range of part's count is acceptable - At least one - there should be at least one instance of this part - Unacceptable - rooms with this part will be ignored","title":"Parts Limit"},{"location":"Introduction/What%20are%20floor%20tags/","text":"What are floor tags? \u00b6","title":"What are floor tags"},{"location":"Introduction/What%20are%20floor%20tags/#what-are-floor-tags","text":"","title":"What are floor tags?"},{"location":"Introduction/What%20is%20a%20Placeable%20Object/","text":"What is a Placeable Object? \u00b6 Placeable Object is a generalization for all items which can be placed, including furniture. Basically it's a container for part with placing requirements. To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> PlaceableObject Preview \u00b6 Preview panel helps you to work with the Preview system . To continue we should create a Preview system instance. The Domik contains a preconfigured Preview instance prefab so you can just drag-n-drop it to the scene. To do it go to the Domik folder and select the Preview prefab and drop it somethere in the scene. This system will draw all changes of selected Placeable Object, so watch it when you working with some Placeable Object. Now let's go back to the Preview panel in the Placeable Object. Turn - select special turn for preview. Build button - press it to rebuild preview manually. Find button - press it to find the Preview system instance in the scene. Settings \u00b6 Part - this is the core of the Placeable Object. Basically, Placeable Object is just a part with placing rules. So here you should select that exactly do you want to place in the house cell. Possible Places - here you should define where this part can be placed. Just add some Places or Masks to the list. To see how this part will looks like in this place just select some of them. You can add more than one place and Placeable Object will find much more potential places in the room. Actions after placing \u00b6 Some objects should change environment around, and here you can describe it. Basically, you just need to select some neighbour cell and add some actions to them which will be called after placing. Floor - select a floor where you want to pick the cell - Top - show cells on the floor above - Current - show cells of the same floor where the target cell is - Down - show cells on the floor below Here you can see cells grid. Click on some cell to start working with it. In the panel below you can see two lists: - remove list - add here parts which will be removed from this cell after placing - add list - add here parts which will be added to this cell after placing Added and removed parts will be showed on the preview with transparent green and red materials.","title":"What is a Placeable Object"},{"location":"Introduction/What%20is%20a%20Placeable%20Object/#what-is-a-placeable-object","text":"Placeable Object is a generalization for all items which can be placed, including furniture. Basically it's a container for part with placing requirements. To create new floor select some folder in the Project window -> Right Mouse Click -> Create -> Domik -> PlaceableObject","title":"What is a Placeable Object?"},{"location":"Introduction/What%20is%20a%20Placeable%20Object/#preview","text":"Preview panel helps you to work with the Preview system . To continue we should create a Preview system instance. The Domik contains a preconfigured Preview instance prefab so you can just drag-n-drop it to the scene. To do it go to the Domik folder and select the Preview prefab and drop it somethere in the scene. This system will draw all changes of selected Placeable Object, so watch it when you working with some Placeable Object. Now let's go back to the Preview panel in the Placeable Object. Turn - select special turn for preview. Build button - press it to rebuild preview manually. Find button - press it to find the Preview system instance in the scene.","title":"Preview"},{"location":"Introduction/What%20is%20a%20Placeable%20Object/#settings","text":"Part - this is the core of the Placeable Object. Basically, Placeable Object is just a part with placing rules. So here you should select that exactly do you want to place in the house cell. Possible Places - here you should define where this part can be placed. Just add some Places or Masks to the list. To see how this part will looks like in this place just select some of them. You can add more than one place and Placeable Object will find much more potential places in the room.","title":"Settings"},{"location":"Introduction/What%20is%20a%20Placeable%20Object/#actions-after-placing","text":"Some objects should change environment around, and here you can describe it. Basically, you just need to select some neighbour cell and add some actions to them which will be called after placing. Floor - select a floor where you want to pick the cell - Top - show cells on the floor above - Current - show cells of the same floor where the target cell is - Down - show cells on the floor below Here you can see cells grid. Click on some cell to start working with it. In the panel below you can see two lists: - remove list - add here parts which will be removed from this cell after placing - add list - add here parts which will be added to this cell after placing Added and removed parts will be showed on the preview with transparent green and red materials.","title":"Actions after placing"},{"location":"Introduction/What%20is%20a%20Preview%20system/","text":"What is a Preview system? \u00b6 The Preview system allows you to see changes of the Domik scriptable objects right in the scene. The Domik contains a premade Preview system instance prefab, so feel free to use it with example house. To use it just drag'n'drop the PREVIEW prefab from the Domik folder to the scene. The Preveiw system works with: - Part - Mask - Place - PlaceableObject So you can select some of them so see how the Preview works: Part Preview \u00b6 Part Preview allows yow to see how selected part will looks like in result. Place Preview \u00b6 Place Preview allows you to see how some place actually looks like. You can see changes of some Place instantly. Mask Preview \u00b6 Mask Preview shows visual representation of masks. You can see changes of some Mask instantly. Placeable Object Preview \u00b6","title":"What is a Preview system"},{"location":"Introduction/What%20is%20a%20Preview%20system/#what-is-a-preview-system","text":"The Preview system allows you to see changes of the Domik scriptable objects right in the scene. The Domik contains a premade Preview system instance prefab, so feel free to use it with example house. To use it just drag'n'drop the PREVIEW prefab from the Domik folder to the scene. The Preveiw system works with: - Part - Mask - Place - PlaceableObject So you can select some of them so see how the Preview works:","title":"What is a Preview system?"},{"location":"Introduction/What%20is%20a%20Preview%20system/#part-preview","text":"Part Preview allows yow to see how selected part will looks like in result.","title":"Part Preview"},{"location":"Introduction/What%20is%20a%20Preview%20system/#place-preview","text":"Place Preview allows you to see how some place actually looks like. You can see changes of some Place instantly.","title":"Place Preview"},{"location":"Introduction/What%20is%20a%20Preview%20system/#mask-preview","text":"Mask Preview shows visual representation of masks. You can see changes of some Mask instantly.","title":"Mask Preview"},{"location":"Introduction/What%20is%20a%20Preview%20system/#placeable-object-preview","text":"","title":"Placeable Object Preview"},{"location":"Knowledge%20Base/Modular%20System%20Adaptation/","text":"","title":"Modular System Adaptation"},{"location":"Old%20stuff/GettingStarted/","text":"Getting Started \u00b6 The Domik is a procedural house generator for Unity3D. Features: - Interiors and Furniture - empty basic rooms? Not today :D - Pipeline: a node graph based visual language - program your own house system just by drag'n'drop nodes! - Skins support - use your own look for the house. - Place: a 3D describing system - show for the Pipeline what you want to find and change. - Mesh Combine System - strong optimization by one click. - Easy to learn hard to master - To make your first procedural house just drop the House Generator prefab to the scene and press the \"Generate\" button. - Runtime support - make a brand new rougelike game! - Seed - one number to rule them all. The Domik is a one-button solution, so to start working with it you should just drag-n-drop the House Generator prefab to the scene and click \u201cGenerate Random\u201d button.","title":"Getting Started"},{"location":"Old%20stuff/GettingStarted/#getting-started","text":"The Domik is a procedural house generator for Unity3D. Features: - Interiors and Furniture - empty basic rooms? Not today :D - Pipeline: a node graph based visual language - program your own house system just by drag'n'drop nodes! - Skins support - use your own look for the house. - Place: a 3D describing system - show for the Pipeline what you want to find and change. - Mesh Combine System - strong optimization by one click. - Easy to learn hard to master - To make your first procedural house just drop the House Generator prefab to the scene and press the \"Generate\" button. - Runtime support - make a brand new rougelike game! - Seed - one number to rule them all. The Domik is a one-button solution, so to start working with it you should just drag-n-drop the House Generator prefab to the scene and click \u201cGenerate Random\u201d button.","title":"Getting Started"},{"location":"Old%20stuff/Getting%20Started/Add%20new%20furniture/","text":"Add new furniture \u00b6 Now let's add something new to the house. Something like a chair and candellar. First, we need to have a prefab for new furniture, so let's make them. prepare new furniture prefabs gif Now we should add them to the base House Generator skin open skin and add new prefabs to root Add Part Builder component to prefabs Part builder components adding Unlike candellar, chair can be rotated around, so we shall to add an [auto] prefix to it's name prefix gif Now select skin prefab root and click Update Binding button. Wait some time, that's not an instant process. Binging update Yay! We did it. Now it's time to check binding. Select created parts and checkout Part reference Check binding To be sure that everything works fine select Skin root and find created binds Finding binds So here we have these five binds candelar bind chair binds As you can see chair contains four binds and candellar contains one bind. That's because chair can be rotated by 90, 180 and 270 degresses unlike candellar. Save skin prefab and close save and close skin prefab Next we should create Placeable Objects for new furniture, however, there is something to be done before. To work effective you should use a Preview system. It'll show all changes of Placeable Objects, Places and Masks instantly. To do it just select Preview prefab and drop it on the scene. Drop preview Now it's time to create Placeable Objects for new furnitures. create new placeable objects for chair and candellar Select them and add references it relevant parts select po and add part references Now we should define where we want to place this furniture. To do it select some places in Place field Select places for PO Preview shows how placing furniture will looks in the requested place. We made our first Placeable Object. Basically, Placeable Object is a part with place description where it should be placed. Next we should add it to Interior. To do it select some interior and add placeable objects to the furniture list Adding placeable objects to skin furniture list Now let's checkout what this interior is added to some floor Select House Generator and checking interior list Yay, that's here. Now it's time to check results! To do it just click Generate Button and try to find our furniture in the house: Checking house","title":"Add new furniture"},{"location":"Old%20stuff/Getting%20Started/Add%20new%20furniture/#add-new-furniture","text":"Now let's add something new to the house. Something like a chair and candellar. First, we need to have a prefab for new furniture, so let's make them. prepare new furniture prefabs gif Now we should add them to the base House Generator skin open skin and add new prefabs to root Add Part Builder component to prefabs Part builder components adding Unlike candellar, chair can be rotated around, so we shall to add an [auto] prefix to it's name prefix gif Now select skin prefab root and click Update Binding button. Wait some time, that's not an instant process. Binging update Yay! We did it. Now it's time to check binding. Select created parts and checkout Part reference Check binding To be sure that everything works fine select Skin root and find created binds Finding binds So here we have these five binds candelar bind chair binds As you can see chair contains four binds and candellar contains one bind. That's because chair can be rotated by 90, 180 and 270 degresses unlike candellar. Save skin prefab and close save and close skin prefab Next we should create Placeable Objects for new furniture, however, there is something to be done before. To work effective you should use a Preview system. It'll show all changes of Placeable Objects, Places and Masks instantly. To do it just select Preview prefab and drop it on the scene. Drop preview Now it's time to create Placeable Objects for new furnitures. create new placeable objects for chair and candellar Select them and add references it relevant parts select po and add part references Now we should define where we want to place this furniture. To do it select some places in Place field Select places for PO Preview shows how placing furniture will looks in the requested place. We made our first Placeable Object. Basically, Placeable Object is a part with place description where it should be placed. Next we should add it to Interior. To do it select some interior and add placeable objects to the furniture list Adding placeable objects to skin furniture list Now let's checkout what this interior is added to some floor Select House Generator and checking interior list Yay, that's here. Now it's time to check results! To do it just click Generate Button and try to find our furniture in the house: Checking house","title":"Add new furniture"},{"location":"Old%20stuff/Getting%20Started/Change%20an%20interior%20furniture%20look/","text":"Change an interior furniture look \u00b6 You can also change look of some furniture as we did it for wallpapers before. Two tabs, one for change by changing mesh. and second by changing whole object and refresh skin binding To do it open an interior skin and -> replace existed furniture","title":"Change an interior furniture look"},{"location":"Old%20stuff/Getting%20Started/Change%20an%20interior%20furniture%20look/#change-an-interior-furniture-look","text":"You can also change look of some furniture as we did it for wallpapers before. Two tabs, one for change by changing mesh. and second by changing whole object and refresh skin binding To do it open an interior skin and -> replace existed furniture","title":"Change an interior furniture look"},{"location":"Old%20stuff/Getting%20Started/Change%20exterior/","text":"Change exterior \u00b6 Advanced House Generator example contains configurated tags system, so you can change generation process just by changing tags Three columns, one for changing windows, second for changing doors and third for changing facade Change house exterior materials \u00b6 To change materials or mesh just open a base skin in House Generator and change Part Builders materials or meshes Open base skin: -> Select [0]External Wall -> Change material -> Select [0]External Window -> Change material -> Select [0]External Doorway -> Change material","title":"Change exterior"},{"location":"Old%20stuff/Getting%20Started/Change%20exterior/#change-exterior","text":"Advanced House Generator example contains configurated tags system, so you can change generation process just by changing tags Three columns, one for changing windows, second for changing doors and third for changing facade","title":"Change exterior"},{"location":"Old%20stuff/Getting%20Started/Change%20exterior/#change-house-exterior-materials","text":"To change materials or mesh just open a base skin in House Generator and change Part Builders materials or meshes Open base skin: -> Select [0]External Wall -> Change material -> Select [0]External Window -> Change material -> Select [0]External Doorway -> Change material","title":"Change house exterior materials"},{"location":"Old%20stuff/Getting%20Started/Change%20wallpapers/","text":"Change wallpapers \u00b6 Now let's make a little bit change of some room. New wallpappers! So, to do it we should change some interior skin. Select interior -> Skin Settings -> open skin Open interior skin Now lets select [0] internal wall and change it's material Select internal wall and change it's material Now lets select [0] internal window and change it's material Select internal window and change it's material Now lets select [0] internal doorway and change it's material Select internal doorway and change it's material if some PartBuilder gameobject disabled it's okay, it'll works fine. Save changes and check result Save and check","title":"Change wallpapers"},{"location":"Old%20stuff/Getting%20Started/Change%20wallpapers/#change-wallpapers","text":"Now let's make a little bit change of some room. New wallpappers! So, to do it we should change some interior skin. Select interior -> Skin Settings -> open skin Open interior skin Now lets select [0] internal wall and change it's material Select internal wall and change it's material Now lets select [0] internal window and change it's material Select internal window and change it's material Now lets select [0] internal doorway and change it's material Select internal doorway and change it's material if some PartBuilder gameobject disabled it's okay, it'll works fine. Save changes and check result Save and check","title":"Change wallpapers"},{"location":"Old%20stuff/Getting%20Started/Create%20Interior/","text":"","title":"Create Interior"},{"location":"Old%20stuff/Getting%20Started/Create%20Pipeline/","text":"Create Pipeline \u00b6 The Pipeline is a visual scripting language which uses to generate a house. (\u0421\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u044d\u0442\u0443 \u0445\u0443\u0439\u043d\u044e \u043f\u043e\u0434 \u043a\u0430\u0442) How to create and use the Pipeline asset \u00b6 To create a new Pipeline asset right click on some folder -> Create -> Domik -> Pipeline. Create pipeline process To start working with it open it by double clicking Opening pipeline process Now you see the Pipeline window. It's empty and useless. To make it little bit useful right click somethere -> Add Node -> Flow -> Start Start node adding process Drag pin right and release it -> Add -> Add Part Add Part node Drag pin right and release it -> Type \"End\" to the search -> End End node adding process Click Part field in the Add Part node and select Floor part select floor part Save and close the window save and close Now drag this Pipeline to some House Generator pipeline field and click Generate button drag and click generate Here is the result. No, that's not looks like a good place to live, but, at least, now you understand how to works with the Pipeline. To revert changes just select previous Pipeline Select previous pipeline and check it","title":"Create Pipeline"},{"location":"Old%20stuff/Getting%20Started/Create%20Pipeline/#create-pipeline","text":"The Pipeline is a visual scripting language which uses to generate a house. (\u0421\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u044d\u0442\u0443 \u0445\u0443\u0439\u043d\u044e \u043f\u043e\u0434 \u043a\u0430\u0442)","title":"Create Pipeline"},{"location":"Old%20stuff/Getting%20Started/Create%20Pipeline/#how-to-create-and-use-the-pipeline-asset","text":"To create a new Pipeline asset right click on some folder -> Create -> Domik -> Pipeline. Create pipeline process To start working with it open it by double clicking Opening pipeline process Now you see the Pipeline window. It's empty and useless. To make it little bit useful right click somethere -> Add Node -> Flow -> Start Start node adding process Drag pin right and release it -> Add -> Add Part Add Part node Drag pin right and release it -> Type \"End\" to the search -> End End node adding process Click Part field in the Add Part node and select Floor part select floor part Save and close the window save and close Now drag this Pipeline to some House Generator pipeline field and click Generate button drag and click generate Here is the result. No, that's not looks like a good place to live, but, at least, now you understand how to works with the Pipeline. To revert changes just select previous Pipeline Select previous pipeline and check it","title":"How to create and use the Pipeline asset"},{"location":"Old%20stuff/Getting%20Started/Create%20Preview%20System/","text":"Create Preview System \u00b6 Preview is a visualisation system for Domik scriptable objects. Prepare \u00b6 Open Domik folder in project -> Select Preview prefab -> Drop it to the scene dropping preview gif Usage \u00b6 Then you select Part, Place, Placeable Object or Mask, Preview will render it's visual representation, so you can change them and see results imidiately for tabs which shows usaging wigh part, place, po and mask See also \u00b6 Preview","title":"Create Preview System"},{"location":"Old%20stuff/Getting%20Started/Create%20Preview%20System/#create-preview-system","text":"Preview is a visualisation system for Domik scriptable objects.","title":"Create Preview System"},{"location":"Old%20stuff/Getting%20Started/Create%20Preview%20System/#prepare","text":"Open Domik folder in project -> Select Preview prefab -> Drop it to the scene dropping preview gif","title":"Prepare"},{"location":"Old%20stuff/Getting%20Started/Create%20Preview%20System/#usage","text":"Then you select Part, Place, Placeable Object or Mask, Preview will render it's visual representation, so you can change them and see results imidiately for tabs which shows usaging wigh part, place, po and mask","title":"Usage"},{"location":"Old%20stuff/Getting%20Started/Create%20Preview%20System/#see-also","text":"Preview","title":"See also"},{"location":"Overview/House%20Generator/","text":"House Generator \u00b6 The House Generator component is the entry point to start generation of house. To create a house generator: - Right Click on the scene hierarchy -> Create Empty -> select created gameObject -> AddComponent -> House Generator. - Just drag-n-drop existed house generator prefab to the scene. Generate Section \u00b6 Generate Random - triggers a house generation with random Seed. Seed - a number which uses to generate a house. Generate - triggers a house generation from current Seed. Pretty useful for regenerate a house after some changes. Pipeline - a reference to Pipeline Node Graph instance. If you want to change a generation rules just change the pipeline! Combining Mode - how accurate House Builder should combine meshes. Realtime - fast but with artifacts. Pretty suitable for realtime generation or if you want to check what happens after some changes. Baked - long but artifacts free. You can use it in realtime also! House Skins \u00b6 Here is a list of base house skins. You can think about these skins as about skins by default. Floors \u00b6 Floors is a description of expected house floors. Floor Plans \u00b6 Floor Plans is a list of expected floors. Select some floor or add new to start changes. Panels below represents settings of selected house. Name - name of selected floor. Interiors - List of possible Interior for selected floor. If you want to increase chance of placing some interior - reorder it to top of the list. Tags - floor tags. This floor will be marked by these tags, so you'll be able to filter this floor by some of these tags and make changes. Example of filtering by tag:","title":"House Generator"},{"location":"Overview/House%20Generator/#house-generator","text":"The House Generator component is the entry point to start generation of house. To create a house generator: - Right Click on the scene hierarchy -> Create Empty -> select created gameObject -> AddComponent -> House Generator. - Just drag-n-drop existed house generator prefab to the scene.","title":"House Generator"},{"location":"Overview/House%20Generator/#generate-section","text":"Generate Random - triggers a house generation with random Seed. Seed - a number which uses to generate a house. Generate - triggers a house generation from current Seed. Pretty useful for regenerate a house after some changes. Pipeline - a reference to Pipeline Node Graph instance. If you want to change a generation rules just change the pipeline! Combining Mode - how accurate House Builder should combine meshes. Realtime - fast but with artifacts. Pretty suitable for realtime generation or if you want to check what happens after some changes. Baked - long but artifacts free. You can use it in realtime also!","title":"Generate Section"},{"location":"Overview/House%20Generator/#house-skins","text":"Here is a list of base house skins. You can think about these skins as about skins by default.","title":"House Skins"},{"location":"Overview/House%20Generator/#floors","text":"Floors is a description of expected house floors.","title":"Floors"},{"location":"Overview/House%20Generator/#floor-plans","text":"Floor Plans is a list of expected floors. Select some floor or add new to start changes. Panels below represents settings of selected house. Name - name of selected floor. Interiors - List of possible Interior for selected floor. If you want to increase chance of placing some interior - reorder it to top of the list. Tags - floor tags. This floor will be marked by these tags, so you'll be able to filter this floor by some of these tags and make changes. Example of filtering by tag:","title":"Floor Plans"},{"location":"Overview/Interior/","text":"Interior \u00b6 Interior is a scriptable object with info about room transformation. (Yea, that's just an interior, lol). Place Interiors Node will try to find suitable interiors for all rooms in the house. Furniture \u00b6 Furniture - a list of Placeable Object or Placeable Objects Container . Add here all that you want to see in this room. Skins \u00b6 Skins - skins which will override a Base Skin from the House Generator . If you want to change a default look of walls, ceiling, floor, etc. just make new Skin with different materials for them and add here. Placing Rules \u00b6 Here you can write special requirements for room. - Max Count Per Floor - limit for that type of interiors per floor. If you don't want to have more than two toilets per floor just write here 2 . - Prefer Room - requirements for room size - Small - prefer small rooms - Medium - prefer medium rooms - Big - prefer big rooms - Random - you don't care Parts Limit \u00b6 Here you can describe which parts you don't want to see in this interior. If you don't want to have windows in the toilet add a window part here and select an Unacceptable mode. Possible States \u00b6 - Fixed - you want to see the concrete count of this part in this room - Rande - count of this Part can be in range between min and max. - At least one - acceptable if this room has at least one exemplar of this part - Unacceptable - this part is prohibited in this room","title":"Interior"},{"location":"Overview/Interior/#interior","text":"Interior is a scriptable object with info about room transformation. (Yea, that's just an interior, lol). Place Interiors Node will try to find suitable interiors for all rooms in the house.","title":"Interior"},{"location":"Overview/Interior/#furniture","text":"Furniture - a list of Placeable Object or Placeable Objects Container . Add here all that you want to see in this room.","title":"Furniture"},{"location":"Overview/Interior/#skins","text":"Skins - skins which will override a Base Skin from the House Generator . If you want to change a default look of walls, ceiling, floor, etc. just make new Skin with different materials for them and add here.","title":"Skins"},{"location":"Overview/Interior/#placing-rules","text":"Here you can write special requirements for room. - Max Count Per Floor - limit for that type of interiors per floor. If you don't want to have more than two toilets per floor just write here 2 . - Prefer Room - requirements for room size - Small - prefer small rooms - Medium - prefer medium rooms - Big - prefer big rooms - Random - you don't care","title":"Placing Rules"},{"location":"Overview/Interior/#parts-limit","text":"Here you can describe which parts you don't want to see in this interior. If you don't want to have windows in the toilet add a window part here and select an Unacceptable mode.","title":"Parts Limit"},{"location":"Overview/Interior/#possible-states","text":"- Fixed - you want to see the concrete count of this part in this room - Rande - count of this Part can be in range between min and max. - At least one - acceptable if this room has at least one exemplar of this part - Unacceptable - this part is prohibited in this room","title":"Possible States"},{"location":"Overview/Mask/","text":"Mask \u00b6 Mask, also known as adjacency mask, is a description about accessibility from central cell to neighbour cells. You can use it as way as Place , but in more brutal manner. Use it if you wan't to find house or rooms borders, some holes or something like that, and you don't care about parts inside of them. Space - what type of adjacency you want to check House - cell is accessible if exists in the house. Good choice if you want to find something like a borders of house. Room - cells is accessible if exists in the house and if it has the same RoomID as the current cell. Use it if you want to find borders of rooms. Floor - changes floor for cells grid panel Grid of cells - click on the cell which checking status you want to change. State - which accessibility status this cell should have? Accessible - this cell should be accessible from current cell Inaccessible - this cell should be inaccessible from current cell","title":"Mask"},{"location":"Overview/Mask/#mask","text":"Mask, also known as adjacency mask, is a description about accessibility from central cell to neighbour cells. You can use it as way as Place , but in more brutal manner. Use it if you wan't to find house or rooms borders, some holes or something like that, and you don't care about parts inside of them. Space - what type of adjacency you want to check House - cell is accessible if exists in the house. Good choice if you want to find something like a borders of house. Room - cells is accessible if exists in the house and if it has the same RoomID as the current cell. Use it if you want to find borders of rooms. Floor - changes floor for cells grid panel Grid of cells - click on the cell which checking status you want to change. State - which accessibility status this cell should have? Accessible - this cell should be accessible from current cell Inaccessible - this cell should be inaccessible from current cell","title":"Mask"},{"location":"Overview/Nodes/","text":"Nodes \u00b6 Here is a list of avaliable nodes which you can use do write the Pipeline logic. To create a new node Right Click in the graph -> Create Node -> Select Category -> Select Node Action Nodes \u00b6 Create Override Skin Layer node \u00b6 The Create Override Skin Layer node creates a special layer which you can use to define cells which should use a special skin. It'll not override other skins in this cells, instead of it it'll add a new skin in the top of skin applying queue. Parameters: skin - a Skin which will be used to create a Skin Layer Find And Replace Node \u00b6 Finds Cells with target Part and replaces the target part with the newPart on them. Parameters : target - part which we want to replace newPart - part which will replace Extract Positions Node \u00b6 The Extract Positions node extracts positions of input node to the output positions array. Merge Override Skin Layers Node \u00b6 The Merge Override Skin Layers node merges input layers to one layer. Shift Node \u00b6 The Shift node shifts positions for all input cells. Parameters: X - x axis offset Y - y axis offset Floor - floor offset Split Into Rooms Node \u00b6 The Split Into Rooms node splits input cells to rooms by overriding their roomIDs. Strongly Recommended to use before [[Place Interiors node]]. Parameters: Min Size - the minimum possible size of rooms Max Size - the minimum possible size of rooms Add nodes \u00b6 Add Part Node \u00b6 The Add Part node adds a part to the input cells. Before Add Part After Add Part Add Part to Part Node \u00b6 The Add Part to Part node filters cells by part and add another part to these cells. Parameters: - target - a Part which will be used as filter - part - a Part which will be added to filtered cells - mode - No Rotation - just find cells with target Part and add new part to them - Rotate Only Target - find cells with all possible target rotations and add new part to them - Rotate Target And Part - sync target part and new part rotations. Before After Add Roof Cells Node \u00b6 The Add Roof Cells node adds additional cells in tops of input cells. Result looks like a pyramid. Before After Filter nodes \u00b6 Filter By Added Floors Node \u00b6 The Filter By Added Floors node filters cells which positioned on the floors which wasn't described in the Floors House Generator menu. Parameters: Invert - return cells without added floors. Filter By Floor Node \u00b6 The Filter By Floor node filters cells positioned on the target floor. Parameters: int field - floor which you want to filter Filter By Mask Node \u00b6 The Filter By Mask node returns cells filtered by special mask. Parameters: Mask - a mask which you want to use as filter Filter By Positions Node \u00b6 The Filter By Positions node returns cells which has the same positions as in input Positions array. Filter By Tag Node \u00b6 The FiIter By Tag node returns cells with target Tag. Input: In - all cells which we want to filter Positions - cells positions array which we want to use as a filter Filter Internel Doors Places Node \u00b6 The Filter By Internal Doors Places analyzes input cells and returns suitable cellses for doors between rooms. Output: Forward - Cells where you should add the door part which shouldn't be rotated Backward - Cells where you should add the door part which should be rotated by 180 degress. Right - Cells where you should add the door part which should be rotated by 90 degress. Left - Cells where you should add the door part which should be rotated by 270 degress. Filter Interse\u0441tions Node \u00b6 The Filter Intersections node returns cells whose positions intersect, so if you have cells set with positions [0, 0, 0] , [0, 1, 0], [1, 1, 0] and [3, 4, 0], [0, 0, 0] , [1, 1, 0] , [3, 4, 1], the result will be -> [0, 0, 0] , [1, 1, 0] . Filter Neighbour Cells Node \u00b6 The Filter Neighbour Cells node returns neighbour cells sorted by directions. Filter Random Cell Node \u00b6 The Filter Random Cell node returns a random cell from input cells. Filter Random Input Node \u00b6 The Filter Random Input node returns cells from a random input. Filter With Part Node \u00b6 The Filter With Part node returns cells with a target part. Filter Without Part Node \u00b6 The Filter Without Part node returns cells without a target part. Flow \u00b6 Exclude Node \u00b6 The Exclude node returns cells from A input but without cells from B input. Merge Node \u00b6 The Merge node merges cells from input into one cells set (parts sets also will be merged) and then returns them. Override Node \u00b6 The Override node merges input cells into one cells set, but intersected cells from an A input will be overrode by cells from a B input. Shuffle Node \u00b6 The Shuffle node shuffles an input cells array. That's not change cells positions or other sort of data, it just makes a chaotic reordering of an input cells set. Main Nodes \u00b6 End Node \u00b6 The End node returns an input cells as a result of Pipeline working. The Pipeline should always have one (and only one) End node or it'll not working properly. You can also use this node for debugging, just connect an input of this node with output of some node to see that's happening in this step of generation. Start Node \u00b6 The Start node is an entry point of generation process. This node collects data stored in the House Generator component and use them to make a house draft. The Start node returns a set of cells which represents a gabarits of house, but these cells has no parts, they aren't splitted by rooms and so on. That's just raw cells. Place Nodes \u00b6 Place Interiors Node \u00b6 The Place Interiors node analysis input cells and sets a relevent interior for them. It also places furniture. Place Part Node \u00b6 The Place Part node filters cells by mask and add a Part to them. Place Placeable Object Forced Node \u00b6 Unlike Place Placeable Object node, this node ignores placing requirements and just place this Placeable Object on input cell. Input : All - all accessible cells, needs to run actions after placing (read Placeable Object ). Target - here you want to place this PlaceableObject. Parameters : placeableObject - a Placeable Object which you want to place turn - how you want to turn it when placing Place Placeable Object Node \u00b6 The Place Placeable Object node places a PlaceableObject ot input cells. Parameters: Placing Mode: One Per House - try to place Placeable Object only once. One Per Floor - try to place Placeable Object once on every accessible floor. One Per Room - try to place Placeable Object once on every room. One Per Cell - try to place Placeable Object on every input cell. Place Stairs Node \u00b6 The Place Stairs node tires to place stairs in the longest stairwells. Your house can have more than one stairwell, mostly because of difference between floors planning. Cells of floors which wasn't successfully connected returns to the Failed output, so you can handle them by less demanding rules. input: In - cells to process Forbidden - cells which inaccessible for stairs placing output: Successful - cells of floors which was connected by placed stairs. Failed - cells of floors which wasn't connected by stairwell parameters: stairs - a Placeable Object which represents stairs minStairwellLenght - minimal length of stairwell Remove Nodes \u00b6 Remove Part Node \u00b6 The Remove Part node removes a part from all input cells.","title":"**Nodes**"},{"location":"Overview/Nodes/#nodes","text":"Here is a list of avaliable nodes which you can use do write the Pipeline logic. To create a new node Right Click in the graph -> Create Node -> Select Category -> Select Node","title":"Nodes"},{"location":"Overview/Nodes/#action-nodes","text":"","title":"Action Nodes"},{"location":"Overview/Nodes/#create-override-skin-layer-node","text":"The Create Override Skin Layer node creates a special layer which you can use to define cells which should use a special skin. It'll not override other skins in this cells, instead of it it'll add a new skin in the top of skin applying queue. Parameters: skin - a Skin which will be used to create a Skin Layer","title":"Create Override Skin Layer node"},{"location":"Overview/Nodes/#find-and-replace-node","text":"Finds Cells with target Part and replaces the target part with the newPart on them. Parameters : target - part which we want to replace newPart - part which will replace","title":"Find And Replace Node"},{"location":"Overview/Nodes/#extract-positions-node","text":"The Extract Positions node extracts positions of input node to the output positions array.","title":"Extract Positions Node"},{"location":"Overview/Nodes/#merge-override-skin-layers-node","text":"The Merge Override Skin Layers node merges input layers to one layer.","title":"Merge Override Skin Layers Node"},{"location":"Overview/Nodes/#shift-node","text":"The Shift node shifts positions for all input cells. Parameters: X - x axis offset Y - y axis offset Floor - floor offset","title":"Shift Node"},{"location":"Overview/Nodes/#split-into-rooms-node","text":"The Split Into Rooms node splits input cells to rooms by overriding their roomIDs. Strongly Recommended to use before [[Place Interiors node]]. Parameters: Min Size - the minimum possible size of rooms Max Size - the minimum possible size of rooms","title":"Split Into Rooms Node"},{"location":"Overview/Nodes/#add-nodes","text":"","title":"Add nodes"},{"location":"Overview/Nodes/#add-part-node","text":"The Add Part node adds a part to the input cells. Before Add Part After Add Part","title":"Add Part Node"},{"location":"Overview/Nodes/#add-part-to-part-node","text":"The Add Part to Part node filters cells by part and add another part to these cells. Parameters: - target - a Part which will be used as filter - part - a Part which will be added to filtered cells - mode - No Rotation - just find cells with target Part and add new part to them - Rotate Only Target - find cells with all possible target rotations and add new part to them - Rotate Target And Part - sync target part and new part rotations. Before After","title":"Add Part to Part Node"},{"location":"Overview/Nodes/#add-roof-cells-node","text":"The Add Roof Cells node adds additional cells in tops of input cells. Result looks like a pyramid. Before After","title":"Add Roof Cells Node"},{"location":"Overview/Nodes/#filter-nodes","text":"","title":"Filter nodes"},{"location":"Overview/Nodes/#filter-by-added-floors-node","text":"The Filter By Added Floors node filters cells which positioned on the floors which wasn't described in the Floors House Generator menu. Parameters: Invert - return cells without added floors.","title":"Filter By Added Floors Node"},{"location":"Overview/Nodes/#filter-by-floor-node","text":"The Filter By Floor node filters cells positioned on the target floor. Parameters: int field - floor which you want to filter","title":"Filter By Floor Node"},{"location":"Overview/Nodes/#filter-by-mask-node","text":"The Filter By Mask node returns cells filtered by special mask. Parameters: Mask - a mask which you want to use as filter","title":"Filter By Mask Node"},{"location":"Overview/Nodes/#filter-by-positions-node","text":"The Filter By Positions node returns cells which has the same positions as in input Positions array.","title":"Filter By Positions Node"},{"location":"Overview/Nodes/#filter-by-tag-node","text":"The FiIter By Tag node returns cells with target Tag. Input: In - all cells which we want to filter Positions - cells positions array which we want to use as a filter","title":"Filter By Tag Node"},{"location":"Overview/Nodes/#filter-internel-doors-places-node","text":"The Filter By Internal Doors Places analyzes input cells and returns suitable cellses for doors between rooms. Output: Forward - Cells where you should add the door part which shouldn't be rotated Backward - Cells where you should add the door part which should be rotated by 180 degress. Right - Cells where you should add the door part which should be rotated by 90 degress. Left - Cells where you should add the door part which should be rotated by 270 degress.","title":"Filter Internel Doors Places Node"},{"location":"Overview/Nodes/#filter-intersetions-node","text":"The Filter Intersections node returns cells whose positions intersect, so if you have cells set with positions [0, 0, 0] , [0, 1, 0], [1, 1, 0] and [3, 4, 0], [0, 0, 0] , [1, 1, 0] , [3, 4, 1], the result will be -> [0, 0, 0] , [1, 1, 0] .","title":"Filter Interse\u0441tions Node"},{"location":"Overview/Nodes/#filter-neighbour-cells-node","text":"The Filter Neighbour Cells node returns neighbour cells sorted by directions.","title":"Filter Neighbour Cells Node"},{"location":"Overview/Nodes/#filter-random-cell-node","text":"The Filter Random Cell node returns a random cell from input cells.","title":"Filter Random Cell Node"},{"location":"Overview/Nodes/#filter-random-input-node","text":"The Filter Random Input node returns cells from a random input.","title":"Filter Random Input Node"},{"location":"Overview/Nodes/#filter-with-part-node","text":"The Filter With Part node returns cells with a target part.","title":"Filter With Part Node"},{"location":"Overview/Nodes/#filter-without-part-node","text":"The Filter Without Part node returns cells without a target part.","title":"Filter Without Part Node"},{"location":"Overview/Nodes/#flow","text":"","title":"Flow"},{"location":"Overview/Nodes/#exclude-node","text":"The Exclude node returns cells from A input but without cells from B input.","title":"Exclude Node"},{"location":"Overview/Nodes/#merge-node","text":"The Merge node merges cells from input into one cells set (parts sets also will be merged) and then returns them.","title":"Merge Node"},{"location":"Overview/Nodes/#override-node","text":"The Override node merges input cells into one cells set, but intersected cells from an A input will be overrode by cells from a B input.","title":"Override Node"},{"location":"Overview/Nodes/#shuffle-node","text":"The Shuffle node shuffles an input cells array. That's not change cells positions or other sort of data, it just makes a chaotic reordering of an input cells set.","title":"Shuffle Node"},{"location":"Overview/Nodes/#main-nodes","text":"","title":"Main Nodes"},{"location":"Overview/Nodes/#end-node","text":"The End node returns an input cells as a result of Pipeline working. The Pipeline should always have one (and only one) End node or it'll not working properly. You can also use this node for debugging, just connect an input of this node with output of some node to see that's happening in this step of generation.","title":"End Node"},{"location":"Overview/Nodes/#start-node","text":"The Start node is an entry point of generation process. This node collects data stored in the House Generator component and use them to make a house draft. The Start node returns a set of cells which represents a gabarits of house, but these cells has no parts, they aren't splitted by rooms and so on. That's just raw cells.","title":"Start Node"},{"location":"Overview/Nodes/#place-nodes","text":"","title":"Place Nodes"},{"location":"Overview/Nodes/#place-interiors-node","text":"The Place Interiors node analysis input cells and sets a relevent interior for them. It also places furniture.","title":"Place Interiors Node"},{"location":"Overview/Nodes/#place-part-node","text":"The Place Part node filters cells by mask and add a Part to them.","title":"Place Part Node"},{"location":"Overview/Nodes/#place-placeable-object-forced-node","text":"Unlike Place Placeable Object node, this node ignores placing requirements and just place this Placeable Object on input cell. Input : All - all accessible cells, needs to run actions after placing (read Placeable Object ). Target - here you want to place this PlaceableObject. Parameters : placeableObject - a Placeable Object which you want to place turn - how you want to turn it when placing","title":"Place Placeable Object Forced Node"},{"location":"Overview/Nodes/#place-placeable-object-node","text":"The Place Placeable Object node places a PlaceableObject ot input cells. Parameters: Placing Mode: One Per House - try to place Placeable Object only once. One Per Floor - try to place Placeable Object once on every accessible floor. One Per Room - try to place Placeable Object once on every room. One Per Cell - try to place Placeable Object on every input cell.","title":"Place Placeable Object Node"},{"location":"Overview/Nodes/#place-stairs-node","text":"The Place Stairs node tires to place stairs in the longest stairwells. Your house can have more than one stairwell, mostly because of difference between floors planning. Cells of floors which wasn't successfully connected returns to the Failed output, so you can handle them by less demanding rules. input: In - cells to process Forbidden - cells which inaccessible for stairs placing output: Successful - cells of floors which was connected by placed stairs. Failed - cells of floors which wasn't connected by stairwell parameters: stairs - a Placeable Object which represents stairs minStairwellLenght - minimal length of stairwell","title":"Place Stairs Node"},{"location":"Overview/Nodes/#remove-nodes","text":"","title":"Remove Nodes"},{"location":"Overview/Nodes/#remove-part-node","text":"The Remove Part node removes a part from all input cells.","title":"Remove Part Node"},{"location":"Overview/Part%201/","text":"Part \u00b6 Part is a scriptable object which represents an abstract idea of some house object. Basically it's just the name, nothing more. Pipeline works only with parts and knows nothing about how parts actually looks. Turned 90 - link to the same part but rotated on 90 degress Turned 180 - link to the same part but rotated on 180 degress Turned 270 - link to the same part but rotated on 270 degress An example above shows a Floor part. Floor has no rotation so all three rotation links are empty. That's how can looks a Part with rotations Rotation degress wrote in the square brackets. How does it works? \u00b6 Let's image that we have a small room with walls, ceiling, floor, bed and some table. If we want to represent it as a room generated by Domik, we should split this room by cells. After splitting we have 6 cells. But how we can write an info about things in these cells? We can do it by Parts ofcouse! Look at this screenshot: Here we have a room Room after splitting by Cells: Room after splitting by Parts: Every cell now has it's own set of Parts.","title":"Part"},{"location":"Overview/Part%201/#part","text":"Part is a scriptable object which represents an abstract idea of some house object. Basically it's just the name, nothing more. Pipeline works only with parts and knows nothing about how parts actually looks. Turned 90 - link to the same part but rotated on 90 degress Turned 180 - link to the same part but rotated on 180 degress Turned 270 - link to the same part but rotated on 270 degress An example above shows a Floor part. Floor has no rotation so all three rotation links are empty. That's how can looks a Part with rotations Rotation degress wrote in the square brackets.","title":"Part"},{"location":"Overview/Part%201/#how-does-it-works","text":"Let's image that we have a small room with walls, ceiling, floor, bed and some table. If we want to represent it as a room generated by Domik, we should split this room by cells. After splitting we have 6 cells. But how we can write an info about things in these cells? We can do it by Parts ofcouse! Look at this screenshot: Here we have a room Room after splitting by Cells: Room after splitting by Parts: Every cell now has it's own set of Parts.","title":"How does it works?"},{"location":"Overview/Part%20Builder/","text":"Part Builder \u00b6 Part Builder is a component responsible for creating a Part look. To make a Part Builder for some Part just drag'n'drop some GameObject (which represents how this part should looks like) under into the Skin hierarchy, add the PartBuilder component, rename this gameObject to the same name as Part and Click the Update Binding button in the Skin. If this Part should has rotations, Add [auto] to the name of the Part. Binding will handle all rotations automatically. Own Part - link to the automatically binded Part. Using for debug, the real information about binding stored in the Skin component. Combine - do you want to combine this part meshes? Space - select the building space Room - place this part to the room space. Floor - place this part to the floor space. House - place this part to the house space. What space should I select? Well, that's not so hard to find it out. If it's something what should be in the room, select the Room Space . Example: ** room (internal) walls, furniture, loot. If it's something relative for whole floor, select the **Floor Space Example: ** water on the floor, gas, Post Processing Volume with horror preset for the vault floor. And the same for the **House Space **Example: ** Facade (external) walls, roof, facade plinth.","title":"Part Builder"},{"location":"Overview/Part%20Builder/#part-builder","text":"Part Builder is a component responsible for creating a Part look. To make a Part Builder for some Part just drag'n'drop some GameObject (which represents how this part should looks like) under into the Skin hierarchy, add the PartBuilder component, rename this gameObject to the same name as Part and Click the Update Binding button in the Skin. If this Part should has rotations, Add [auto] to the name of the Part. Binding will handle all rotations automatically. Own Part - link to the automatically binded Part. Using for debug, the real information about binding stored in the Skin component. Combine - do you want to combine this part meshes? Space - select the building space Room - place this part to the room space. Floor - place this part to the floor space. House - place this part to the house space. What space should I select? Well, that's not so hard to find it out. If it's something what should be in the room, select the Room Space . Example: ** room (internal) walls, furniture, loot. If it's something relative for whole floor, select the **Floor Space Example: ** water on the floor, gas, Post Processing Volume with horror preset for the vault floor. And the same for the **House Space **Example: ** Facade (external) walls, roof, facade plinth.","title":"Part Builder"},{"location":"Overview/Part/","text":"Part \u00b6 Part is a scriptable object which represents an abstract idea of some house object. Basically it's just the name, nothing more. Pipeline works only with parts and knows nothing about how parts actually looks. Turned 90 - link to the same part but rotated on 90 degress Turned 180 - link to the same part but rotated on 180 degress Turned 270 - link to the same part but rotated on 270 degress An example above shows a Floor part. Floor has no rotation so all three rotation links are empty. That's how can looks a Part with rotations Rotation degress wrote in the square brackets. How does it works? \u00b6 Let's image that we have a small room with walls, ceiling, floor, bed and some table. If we want to represent it as a room generated by Domik, we should split this room by cells. After splitting we have 6 cells. But how we can write an info about things in these cells? We can do it by Parts ofcouse! Look at this screenshot: Here we have a room Room after splitting by Cells: Room after splitting by Parts: Every cell now has it's own set of Parts.","title":"Part"},{"location":"Overview/Part/#part","text":"Part is a scriptable object which represents an abstract idea of some house object. Basically it's just the name, nothing more. Pipeline works only with parts and knows nothing about how parts actually looks. Turned 90 - link to the same part but rotated on 90 degress Turned 180 - link to the same part but rotated on 180 degress Turned 270 - link to the same part but rotated on 270 degress An example above shows a Floor part. Floor has no rotation so all three rotation links are empty. That's how can looks a Part with rotations Rotation degress wrote in the square brackets.","title":"Part"},{"location":"Overview/Part/#how-does-it-works","text":"Let's image that we have a small room with walls, ceiling, floor, bed and some table. If we want to represent it as a room generated by Domik, we should split this room by cells. After splitting we have 6 cells. But how we can write an info about things in these cells? We can do it by Parts ofcouse! Look at this screenshot: Here we have a room Room after splitting by Cells: Room after splitting by Parts: Every cell now has it's own set of Parts.","title":"How does it works?"},{"location":"Overview/Parts%20Binding%20System/","text":"Parts Binding System \u00b6 The easiest way to understand how to use the Parts Binding System is just looks to it in action. As you can see in screenshot above we have a list with pairs of objects. It's a binding list. Let's take a closer look at the binding element: Reference to the Part Builder . Reference to relevant Part . Rotation offset . Note Please note that they have the same names. It's a very important detail. In process of generation the House Builder tries to find a relevant look to the Part , so it asks every accessible skin if they have some look to the current Part . Look is a Part Builder as you might have guessed. And Skin answers him something like \"Yey, I have one, take this ( Part Builder and then rotate it by ( Rotation offset )\". That's how it works. But how to use it? Well, here are several ways to do it. Manual Binding \u00b6 The easiest way is just add new binding element and drag'n'drop relevant Part and Part Builder , and write a rotation offset. But I don't recommend it because it makes workflow too tiring. Instead of it I definitely recommend to use an Auto Binding . Auto Binding \u00b6 Auto Binding is a much faster way to work with Skin. You don't need to add binding pairs manually, instead of it you must comply the PartBuilders namin convention . PartBuilders naming convention \u00b6 Part and PartBuilder names should be the same. If you want to add some special rotation you shall write it in square brackets. Example [90] Internal Wall If PartBuilder should have 4 standard rotations (0, 90, 180, 270) you must write [auto] name prefix Example [auto] Internal Wall If you want to change a look of some object turn separately, you can make an [auto] PartBuilder for the general rotations and one with [special rotation] for your special case. Example [auto] Internal Wall - with regular wallpapers [180] Internal Wall - with dirty wallpapers In process of binding Skin tries to find a part with the same name as current Part Builder . If it's found, it makes a new binding pair, else there are two scenarious: Ignore this Part Builder Make new Part for this Part Builder . To find out how to select what to do with unbound PartBuilders read below. If Part Builder has an [auto] prefix, Binding System will try to find 4 Parts with [0] , [90] , [180] and [270] prefixes. Result will looks like that: As you can see here we have 4 references to the same Part Builder , but with different Parts, and we also have relevant rotation offsets for them. Binding Panel \u00b6 Now it's time to show how to apply changes. An Auto Binding panel look Create Parts for unbound? - if true Skin will create new Parts for failed PartBuilders. Path for new Parts. Change Folder - press it to change a path for new Parts Update Binding - click it to apply PartBuilding changes.","title":"Parts Binding System"},{"location":"Overview/Parts%20Binding%20System/#parts-binding-system","text":"The easiest way to understand how to use the Parts Binding System is just looks to it in action. As you can see in screenshot above we have a list with pairs of objects. It's a binding list. Let's take a closer look at the binding element: Reference to the Part Builder . Reference to relevant Part . Rotation offset . Note Please note that they have the same names. It's a very important detail. In process of generation the House Builder tries to find a relevant look to the Part , so it asks every accessible skin if they have some look to the current Part . Look is a Part Builder as you might have guessed. And Skin answers him something like \"Yey, I have one, take this ( Part Builder and then rotate it by ( Rotation offset )\". That's how it works. But how to use it? Well, here are several ways to do it.","title":"Parts Binding System"},{"location":"Overview/Parts%20Binding%20System/#manual-binding","text":"The easiest way is just add new binding element and drag'n'drop relevant Part and Part Builder , and write a rotation offset. But I don't recommend it because it makes workflow too tiring. Instead of it I definitely recommend to use an Auto Binding .","title":"Manual Binding"},{"location":"Overview/Parts%20Binding%20System/#auto-binding","text":"Auto Binding is a much faster way to work with Skin. You don't need to add binding pairs manually, instead of it you must comply the PartBuilders namin convention .","title":"Auto Binding"},{"location":"Overview/Parts%20Binding%20System/#partbuilders-naming-convention","text":"Part and PartBuilder names should be the same. If you want to add some special rotation you shall write it in square brackets. Example [90] Internal Wall If PartBuilder should have 4 standard rotations (0, 90, 180, 270) you must write [auto] name prefix Example [auto] Internal Wall If you want to change a look of some object turn separately, you can make an [auto] PartBuilder for the general rotations and one with [special rotation] for your special case. Example [auto] Internal Wall - with regular wallpapers [180] Internal Wall - with dirty wallpapers In process of binding Skin tries to find a part with the same name as current Part Builder . If it's found, it makes a new binding pair, else there are two scenarious: Ignore this Part Builder Make new Part for this Part Builder . To find out how to select what to do with unbound PartBuilders read below. If Part Builder has an [auto] prefix, Binding System will try to find 4 Parts with [0] , [90] , [180] and [270] prefixes. Result will looks like that: As you can see here we have 4 references to the same Part Builder , but with different Parts, and we also have relevant rotation offsets for them.","title":"PartBuilders naming convention"},{"location":"Overview/Parts%20Binding%20System/#binding-panel","text":"Now it's time to show how to apply changes. An Auto Binding panel look Create Parts for unbound? - if true Skin will create new Parts for failed PartBuilders. Path for new Parts. Change Folder - press it to change a path for new Parts Update Binding - click it to apply PartBuilding changes.","title":"Binding Panel"},{"location":"Overview/Pipeline/","text":"Pipeline \u00b6 The Pipeline is a visual scripting language which uses to generate a house. To create a new instance of Pipeline right click on some folder -> Create -> Domik -> Pipeline. To open some existed Pipeline just double click to it. In pipeline you describes a process of house generation step-by-step. The pipeline consists of nodes. Every node is a step of generation of house. In most cases typical node has two pines: - In - Input cells. - Out - output cells. Node get cells from Input, process them and returns to Output. Sometimes it contains parameters. Every pipeline instance should have at least two nodes: Start Node and End Node. Start Node gets an info from House Generator and constructs raw cells. End Node returns processed nodes to the House Builder. Here is an example of primitive pipeline. Start Node - creates a set of nodes based an info from House Generator . Add Parts Node - adds Floor part and Ceiling part to all cells from input. End node - returns input cells with floors and ceilings to the House Builder. To get more information about possible nodes read nodes description below:","title":"Pipeline"},{"location":"Overview/Pipeline/#pipeline","text":"The Pipeline is a visual scripting language which uses to generate a house. To create a new instance of Pipeline right click on some folder -> Create -> Domik -> Pipeline. To open some existed Pipeline just double click to it. In pipeline you describes a process of house generation step-by-step. The pipeline consists of nodes. Every node is a step of generation of house. In most cases typical node has two pines: - In - Input cells. - Out - output cells. Node get cells from Input, process them and returns to Output. Sometimes it contains parameters. Every pipeline instance should have at least two nodes: Start Node and End Node. Start Node gets an info from House Generator and constructs raw cells. End Node returns processed nodes to the House Builder. Here is an example of primitive pipeline. Start Node - creates a set of nodes based an info from House Generator . Add Parts Node - adds Floor part and Ceiling part to all cells from input. End node - returns input cells with floors and ceilings to the House Builder. To get more information about possible nodes read nodes description below:","title":"Pipeline"},{"location":"Overview/Place/","text":"Place \u00b6 Place is a describing system. It represents some place in the house, so you can use it to describe where you want to place some stuff, or you can filter cells which looks like what you described and do something with them and so on. Preview system handles Place, so you can see all changes instantly Place is a set of cells, so if you want to describe some place you should select cells which you want to check, active enable checkbox and add all parts which this place should have into Par In example above described a room corner. Please note what there are no facade sides of walls, what's because this place uses mostly to place furniture, so we don't care about external look of the house. It works because an internal side of the house (include place furniture step also) generates separately from external. How to... \u00b6 To make a new place select some folder and click right mouse button -> Create -> Domik -> Place To make a place with multiple cells select several cells and active an enable checkbox To add some cells on another room select it in the Floor popup menu","title":"Place"},{"location":"Overview/Place/#place","text":"Place is a describing system. It represents some place in the house, so you can use it to describe where you want to place some stuff, or you can filter cells which looks like what you described and do something with them and so on. Preview system handles Place, so you can see all changes instantly Place is a set of cells, so if you want to describe some place you should select cells which you want to check, active enable checkbox and add all parts which this place should have into Par In example above described a room corner. Please note what there are no facade sides of walls, what's because this place uses mostly to place furniture, so we don't care about external look of the house. It works because an internal side of the house (include place furniture step also) generates separately from external.","title":"Place"},{"location":"Overview/Place/#how-to","text":"To make a new place select some folder and click right mouse button -> Create -> Domik -> Place To make a place with multiple cells select several cells and active an enable checkbox To add some cells on another room select it in the Floor popup menu","title":"How to..."},{"location":"Overview/Placeable%20Object/","text":"Placeable Object \u00b6 Placeable Object is, basically, a Part with info where you want to place it. Mostly uses for furniture, but you can use it even for place walls or something else. Preview handles a placeable object automatically, so you can see changes instantly. Part - reference to the Part which you want to place somewhere. Find By - what you want to use to find a better place for this part? Place - use Place Mask - use Mask Reference to Place or Mask Please not that you don't wan't to make a Placeable Object for every rotations of Part . Part will be rotated automatically depending on found place. If Part didn't rotated check Part rotation references. Actions after placing \u00b6 Sometimes you need to change placed Part environment. To do it select cell which you want to change and add Parts to remove parts list and add parts list. In the preview you'll see removed and","title":"Placeable Object"},{"location":"Overview/Placeable%20Object/#placeable-object","text":"Placeable Object is, basically, a Part with info where you want to place it. Mostly uses for furniture, but you can use it even for place walls or something else. Preview handles a placeable object automatically, so you can see changes instantly. Part - reference to the Part which you want to place somewhere. Find By - what you want to use to find a better place for this part? Place - use Place Mask - use Mask Reference to Place or Mask Please not that you don't wan't to make a Placeable Object for every rotations of Part . Part will be rotated automatically depending on found place. If Part didn't rotated check Part rotation references.","title":"Placeable Object"},{"location":"Overview/Placeable%20Object/#actions-after-placing","text":"Sometimes you need to change placed Part environment. To do it select cell which you want to change and add Parts to remove parts list and add parts list. In the preview you'll see removed and","title":"Actions after placing"},{"location":"Overview/Placeable%20Objects%20Container/","text":"Placeable Objects Container \u00b6 Placeable objects container is a scriptable object with references to Placeable Object or Placeable Objects Container . Mode - placing mode Place All - try to place all PlaceableObjects from list below Place First Relative - iterates over Placeable Objects list and stops after first success. Place Random Relative - collect all potentially successed Placeable Objects but place only one by random. Tips \u00b6 There are a lots of ways to use it. First, you should use it if you have a PlaceableObject which can be placed in multiple places. To do it create a PlaceableObjects for every possible Place, add them to the PlaceableObjects list below and change mode to Place First Relative or Place Random Relative mode. Second case is then you have multiple similiar PlaceableObjects but want to add only one. To do it add them to the list and change mode to Place Random Relative mode. And the last is the case when you want to place a list of PlaceableObjects at the same time. Pretty suitable when you want to stay interiors list little bit cleaner. And yes, you can make something like a container with Place All mode and fill it by containers with Place Random Relative mode, so this container will try to place all child containers.","title":"Placeable Objects Container"},{"location":"Overview/Placeable%20Objects%20Container/#placeable-objects-container","text":"Placeable objects container is a scriptable object with references to Placeable Object or Placeable Objects Container . Mode - placing mode Place All - try to place all PlaceableObjects from list below Place First Relative - iterates over Placeable Objects list and stops after first success. Place Random Relative - collect all potentially successed Placeable Objects but place only one by random.","title":"Placeable Objects Container"},{"location":"Overview/Placeable%20Objects%20Container/#tips","text":"There are a lots of ways to use it. First, you should use it if you have a PlaceableObject which can be placed in multiple places. To do it create a PlaceableObjects for every possible Place, add them to the PlaceableObjects list below and change mode to Place First Relative or Place Random Relative mode. Second case is then you have multiple similiar PlaceableObjects but want to add only one. To do it add them to the list and change mode to Place Random Relative mode. And the last is the case when you want to place a list of PlaceableObjects at the same time. Pretty suitable when you want to stay interiors list little bit cleaner. And yes, you can make something like a container with Place All mode and fill it by containers with Place Random Relative mode, so this container will try to place all child containers.","title":"Tips"},{"location":"Overview/Skin/","text":"Skin \u00b6 Skin is a bridge between Part and it's in-game representation. From House Generator perspective, house is a structured collection of Part , so you need to convert these parts to real game objects. Luckily, we have a system that does this automatically. And this system is... the Skin , yay! Skin contains a list of Part Builder . Every Part Builder contains a bind to Part . In process of building, the HouseBuilder asks every available Skin if it has anything for this part. If skin contains a PartBuilder with binding to the processing part, HouseGenerator takes this PartBuilder and runs the Part Building Process. Some internal fairy tale magic and... Yay! You have a built wall. Or window. Or... Some sort of criminal scenes! Or maybe the Spawn Point? PartBuilder can build that you want, just ask him! :D To find out how to work with the PartBuilder component read the PartBuilder section. Another interesting side of Skins System is that you can use more than one skin for the single house. Why do you need it? Well, you can use an individual skin for every single room, whereby you will be able to change wallpapers, furniture vision or even add something absolutely new only for this room. To find out how to do it read an Interior documentation section here. Another way to use multiple skins is using the Pipeline Skins Layer. Now take a closer look at the Skin stored in the HouseGenerator component: As you can see Skin is a regular prefab with the Skin component on the root, so you can open it in Prefab Mode by double clicking. Skin contains a tons of children GameObjects, most of them contains a PartBuilder component. Now lets take a closer look at the Skin Settings \u00b6 Cell Width - width and length sizes of the cell. Just write a floor mesh width here (in meters). Cell Height - height of the cell. Just write a wall mesh height here (in meters). Binding \u00b6","title":"Skin"},{"location":"Overview/Skin/#skin","text":"Skin is a bridge between Part and it's in-game representation. From House Generator perspective, house is a structured collection of Part , so you need to convert these parts to real game objects. Luckily, we have a system that does this automatically. And this system is... the Skin , yay! Skin contains a list of Part Builder . Every Part Builder contains a bind to Part . In process of building, the HouseBuilder asks every available Skin if it has anything for this part. If skin contains a PartBuilder with binding to the processing part, HouseGenerator takes this PartBuilder and runs the Part Building Process. Some internal fairy tale magic and... Yay! You have a built wall. Or window. Or... Some sort of criminal scenes! Or maybe the Spawn Point? PartBuilder can build that you want, just ask him! :D To find out how to work with the PartBuilder component read the PartBuilder section. Another interesting side of Skins System is that you can use more than one skin for the single house. Why do you need it? Well, you can use an individual skin for every single room, whereby you will be able to change wallpapers, furniture vision or even add something absolutely new only for this room. To find out how to do it read an Interior documentation section here. Another way to use multiple skins is using the Pipeline Skins Layer. Now take a closer look at the Skin stored in the HouseGenerator component: As you can see Skin is a regular prefab with the Skin component on the root, so you can open it in Prefab Mode by double clicking. Skin contains a tons of children GameObjects, most of them contains a PartBuilder component. Now lets take a closer look at the Skin","title":"Skin"},{"location":"Overview/Skin/#settings","text":"Cell Width - width and length sizes of the cell. Just write a floor mesh width here (in meters). Cell Height - height of the cell. Just write a wall mesh height here (in meters).","title":"Settings"},{"location":"Overview/Skin/#binding","text":"","title":"Binding"},{"location":"Overview/Tag/","text":"Tag \u00b6 Tag is a marking system which you can use to separate some cells from others. To create a tag right click on some folder -> Create -> Domik -> Tag. See also: - House Generator -> Floors -> Tags - Filter By Tag node","title":"Tag"},{"location":"Overview/Tag/#tag","text":"Tag is a marking system which you can use to separate some cells from others. To create a tag right click on some folder -> Create -> Domik -> Tag. See also: - House Generator -> Floors -> Tags - Filter By Tag node","title":"Tag"},{"location":"WTF/How%20to%20make%20a%20place/","text":"How to make a place \u00b6 At this tutorial I'll show you how to describe 1) select some folder and click right mouse button -> Create -> Domik -> Place 2) Now you have a new Place. Select it. 3) In inspector window select some","title":"How to make a place"},{"location":"WTF/How%20to%20make%20a%20place/#how-to-make-a-place","text":"At this tutorial I'll show you how to describe 1) select some folder and click right mouse button -> Create -> Domik -> Place 2) Now you have a new Place. Select it. 3) In inspector window select some","title":"How to make a place"}]}